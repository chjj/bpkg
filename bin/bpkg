#!/usr/bin/env node

/*!
 * bpkg - bundler for node.js
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/bpkg
 */

'use strict';

const assert = require('assert');
const bpkg = require('../');
const {argv, stdout, stderr, exit} = process;

/*
 * Constants
 */

const VERSION = '0.6.0';

const HELP = `
  Usage: bpkg [options] [file]

  Options:

    -v, --version            output the version number
    -o, --output <file>      output file or directory (default: stdout)
    -e, --env <name>         set environment, node or browser (default: node)
    -n, --node               set environment to node
    -b, --browser            set environment to browser
    -x, --extensions <ext>   list of extensions (default: .js,.mjs,.json,.node)
    --external <names>       comma-separated blacklist of modules
    --local-only             only include local modules
    -f, --browser-field      force usage of package.json "browser" field
    -i, --ignore-missing     ignore missing modules during compilation
    -c, --collect-bindings   include bindings separately
    --ignore-bindings        ignore all bindings
    -X, --exclude-source     exclude c++ source in release mode
    -H, --no-header          do not place header at the top of the bundle
    -l, --no-license         do not place licenses at the top of the bundle
    -d, --date <date>        set date for build (good for deterministic builds)
    -m, --release            output module as multiple files
    -t, --transpile          transpile multiple files without releasing
    -T, --target             select target (cjs, umd, or esm)
    -M, --esm                output module as native ESM
    -C, --cjs                output module as CommonJS
    -u, --umd                append UMD initialization code to browser bundle
    -L, --loose              loose ESM transformations
    -N, --name <name>        name to use for global exposure (default: pkg.name)
    -p, --plugin <plugin>    use plugin
    -r, --requires <a,b,..>  comma-separated list of requires
    -E, --environment <k=v>  key-value pairs for process.env
    -g, --globals <k=v>      key-value pairs for global
    -h, --help               output usage information
`;

/*
 * Helpers
 */

function getArgs(argv) {
  assert(Array.isArray(argv));

  const args = [];

  for (let i = 0; i < argv.length; i++) {
    const arg = argv[i];

    assert(typeof arg === 'string');

    if (arg.startsWith('--')) {
      // e.g. --opt
      const index = arg.indexOf('=');
      if (index !== -1) {
        // e.g. --opt=val
        args.push(arg.substring(0, index));
        args.push(arg.substring(index + 1));
      } else {
        args.push(arg);
      }
    } else if (arg.startsWith('-')) {
      if (arg.length > 2) {
        // e.g. -abc
        for (let j = 1; j < arg.length; j++)
          args.push(`-${arg.charAt(j)}`);
      } else {
        // e.g. -a
        args.push(arg);
      }
    } else {
      // e.g. foo
      args.push(arg);
    }
  }

  return args;
}

async function parseArgs() {
  const options = {
    __proto__: null,
    stream: stderr,
    input: '.',
    files: [],
    output: null,
    code: null,
    env: 'node',
    extensions: ['.js', '.mjs'],
    external: [],
    localOnly: false,
    browserField: false,
    ignoreMissing: false,
    collectBindings: false,
    ignoreBindings: false,
    excludeSource: false,
    noHeader: false,
    noLicense: false,
    time: new Date(),
    release: false,
    transpile: false,
    target: null,
    loose: false,
    name: null,
    plugins: [],
    environment: Object.create(null),
    globals: Object.create(null),
    requires: [],
    verbose: false
  };

  const files = [];
  const args = getArgs(argv);

  for (let i = 2; i < args.length; i++) {
    const arg = args[i];

    let next = '';

    if (i + 1 < args.length)
      next = args[i + 1];

    switch (arg) {
      case '-v':
      case '--version': {
        stdout.write(VERSION + '\n');
        exit(0);
        break;
      }

      case '-o':
      case '--output': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.output = next;

        i += 1;

        break;
      }

      case '-e':
      case '--env': {
        if (next !== 'node' && next !== 'browser')
          throw new Error(`Invalid option for: ${arg}.`);

        options.env = next;

        i += 1;

        break;
      }

      case '-n':
      case '--node': {
        options.env = 'node';
        break;
      }

      case '-b':
      case '--browser': {
        options.env = 'browser';
        break;
      }

      case '-x':
      case '--extensions': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.extensions.push(...next.split(','));

        i += 1;

        break;
      }

      case '--external': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.external.push(...next.split(','));

        i += 1;

        break;
      }

      case '--local-only': {
        options.localOnly = true;
        break;
      }

      case '-f':
      case '--browser-field': {
        options.browserField = true;
        break;
      }

      case '-i':
      case '--ignore-missing': {
        options.ignoreMissing = true;
        break;
      }

      case '-c':
      case '--collect-bindings': {
        options.collectBindings = true;
        break;
      }

      case '--ignore-bindings': {
        options.ignoreBindings = true;
        break;
      }

      case '-X':
      case '--exclude-source': {
        options.excludeSource = true;
        break;
      }

      case '-H':
      case '--no-header': {
        options.noHeader = true;
        break;
      }

      case '-l':
      case '--no-license': {
        options.noLicense = true;
        break;
      }

      case '-d':
      case '--date': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        const date = new Date(next);

        if (date.toString() === 'Invalid Date')
          throw new Error(`Invalid date: ${next}.`);

        options.time = date;

        i += 1;

        break;
      }

      case '-m':
      case '--release': {
        options.release = true;
        break;
      }

      case '-t':
      case '--transpile': {
        options.transpile = true;
        break;
      }

      case '-T':
      case '--target': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        if (next !== 'cjs' && next !== 'umd' && next !== 'esm')
          throw new Error('--target must be one of cjs, umd, or esm.');

        options.target = next;

        i += 1;

        break;
      }

      case '-M':
      case '--esm': {
        options.target = 'esm';
        break;
      }

      case '-C':
      case '--cjs': {
        options.target = 'cjs';
        break;
      }

      case '-u':
      case '--umd': {
        options.target = 'umd';
        break;
      }

      case '-L':
      case '--loose': {
        options.loose = true;
        break;
      }

      case '-N':
      case '--name': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.name = next;

        i += 1;

        break;
      }

      case '-p':
      case '--plugin': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        let pluginOptions = Object.create(null);

        i += 1;

        if (next === '[') {
          let depth = 0;
          let argv = [];

          for (; i < args.length; i++) {
            const arg = args[i];

            argv.push(arg);

            if (arg === '[') {
              depth += 1;
            } else if (arg === ']') {
              depth -= 1;
              if (depth === 0)
                break;
            }
          }

          if (depth !== 0)
            throw new Error('Invalid argument: "[".');

          argv = argv.slice(1, -1);
          next = argv.shift();

          if (!next || next[0] === '-')
            throw new Error(`Invalid option for: ${arg}.`);

          pluginOptions = parseNested(argv);
        }

        options.plugins.push([next, pluginOptions]);

        break;
      }

      case '-g':
      case '--globals':
      case '-E':
      case '--environment': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        const target = arg === '-g' || arg === '--globals'
          ? options.globals
          : options.environment;

        const pairs = next.split(',');

        for (const pair of pairs) {
          const index = pair.indexOf('=');

          if (index === -1) {
            target[pair] = true;
            continue;
          }

          const key = pair.substring(0, index);
          const value = pair.substring(index + 1);

          target[key] = value;
        }

        i += 1;

        break;
      }

      case '-r':
      case '--requires': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.requires.push(...next.split(','));

        i += 1;

        break;
      }

      case '-V':
      case '--verbose': {
        options.verbose = true;
        break;
      }

      case '-h':
      case '--help': {
        stdout.write(HELP + '\n');
        exit(0);
        break;
      }

      default: {
        if (arg.length === 0 || arg[0] === '-')
          throw new Error(`Invalid argument: ${arg}.`);

        files.push(arg);

        break;
      }
    }
  }

  if (options.transpile) {
    options.files = files;
    if (!options.output)
      options.output = files.pop();
  } else {
    if (files.length > 0)
      options.input = files[0];

    if (!options.output && files.length > 1)
      options.output = files[1];
  }

  return options;
}

function parseNested(args) {
  assert(Array.isArray(args));

  const stack = [];

  let options = Object.create(null);
  let list = [];
  let name = null;

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    if (arg === '[') {
      stack.push([options, list, name]);
      options = Object.create(null);
      list = [];
      name = null;
      continue;
    }

    if (arg === ']') {
      if (stack.length === 0)
        throw new Error('Invalid argument: "]".');

      if (name)
        setProperty(options, list, name);

      const value = normalizeObject(options, list);

      [options, list, name] = stack.pop();

      setProperty(options, list, name, value);
      name = null;

      continue;
    }

    if (arg.startsWith('--')) {
      if (name)
        setProperty(options, list, name);

      name = arg.substring(2);

      continue;
    }

    if (arg.startsWith('-')) {
      if (name)
        setProperty(options, list, name);

      name = arg.substring(1);

      continue;
    }

    setProperty(options, list, name, arg);
    name = null;
  }

  if (stack.length > 0)
    throw new Error('Invalid argument: "[".');

  if (name)
    setProperty(options, list, name);

  defineProperty(options, '$', args);
  defineProperty(options, '_', list);

  return options;
}

function setProperty(obj, list, name, value = null) {
  assert(obj && typeof obj === 'object');
  assert(Array.isArray(list));
  assert(name == null || typeof name === 'string');

  if (!name) {
    list.push(value);
    return;
  }

  const parts = name.split('.');
  const last = parts[parts.length - 1];

  for (let i = 0; i < parts.length - 1; i++) {
    const name = parts[i];

    if (!obj[name])
      obj[name] = Object.create(null);

    obj = obj[name];
  }

  if (value != null)
    obj[last] = value;
  else if (last.startsWith('no-'))
    obj[last.substring(3)] = false;
  else
    obj[last] = true;
}

function defineProperty(obj, key, value) {
  assert(obj && typeof obj === 'object');
  assert(typeof key === 'string');

  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    writable: true,
    value
  });
};

function normalizeObject(obj, list) {
  assert(obj && typeof obj === 'object');
  assert(Array.isArray(list));

  if (Object.keys(obj).length === 0)
    return list;

  if (list.length === 0)
    return obj;

  defineProperty(obj, '_', list);

  return obj;
}

(async () => {
  let options;

  try {
    options = await parseArgs();
  } catch (e) {
    stderr.write(e.message + '\n');
    return 1;
  }

  const code = await bpkg(options);

  if (code)
    stdout.write(code);

  return 0;
})().then((code) => {
  process.exitCode = code;
  process.on('exit', () => exit(code));
}).catch((err) => {
  stderr.write(err.stack + '\n');
  exit(1);
});
